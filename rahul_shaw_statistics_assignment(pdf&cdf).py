# -*- coding: utf-8 -*-
"""Copy of Statistics_Assignment(PDF&CDF).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xxcgkYzRzbxsLptWjEaALowpxiXbFZkI

Data set:
https://drive.google.com/open?id=1oPpVV8A_bROfReZCQP2AfgR3zIL_WeiA

(From Kaggle)-- https://www.kaggle.com/gilsousa/habermans-survival-data-set

Description:-
https://drive.google.com/open?id=1ee_Ux01UTqZOGQG4GP_FDDhUKWXj1-PF

Attribute Information:
   1. Age of patient at time of operation (numerical)
   2. Patient's year of operation (year numerical)
   3. Number of positive axillary nodes detected (numerical)
   4. Survival status (class attribute)
         1 = the patient survived 5 years or longer
         2 = the patient died within 5 year

### Analyse the above linked dataset as like iris data.
"""

import numpy as np
import pandas as pd
import seaborn as sns
import io
from google.colab import files

uploaded = files.upload()
data = pd.read_csv(io.StringIO(uploaded['haberman.csv'].decode('utf--8')))
data

"""Q1-- Plot Histogram for all fearutes of the data set and write comments on which feature is best for predicting survival status.

(Hint: Use same process as did in iris data set.)
"""

#Write your code here for ploting--

data['survive'].value_counts()

sns.distplot(data[data['survive']==1]['age'])
sns.distplot(data[data['survive']==2]['age'])

sns.distplot(data[data['survive']==1]['year'])
sns.distplot(data[data['survive']==2]['year'])

sns.distplot(data[data['survive']==1]['nodes'])
sns.distplot(data[data['survive']==2]['nodes'])

# Write your comments here--

#The survive and nodes feature is best for predicting survival status.

"""Q2-- On the ipl wala dataset create a function which will accept a batsman name and 1 interger value and returns the number of runs he has after those many matches

E.g Input (V Kohli, 18)

Output - 678(Runs scored by Virat Kohli after 18 matches
"""

uploaded = files.upload()
delivery = pd.read_csv(io.StringIO(uploaded['deliveries.csv'].decode('utf--8')))
delivery

def batsman(name,int):
  one=delivery[delivery['batsman']==name]
  z=one.groupby('match_id').sum()['batsman_runs'].reset_index()
  z['runs_after']=0
  z['runs_after']=z['batsman_runs']
  return np.cumsum(z['batsman_runs'])[int]
batsman('DA Warner',18)

# Give your comments here

"""Q3: Write a function which will plot the match wise scores of two batsman in the form of a PDF, check this [image](https://drive.google.com/open?id=18y9DiuVvNZ3p5LIBv-eaDVxNtXrI7hp9)
<img src=""/>
"""

def batsman(name,int):
    two=delivery[delivery['batsman']=='S Dhawan']
    a=two.groupby('match_id').sum()['batsman_runs'].reset_index()
    a['runs_after']=0
    a['runs_after']=a['batsman_runs']
    return np.cumsum(a['batsman_runs'])[int]
batsman('S Dhawan',18)

sns.distplot(a['batsman_runs'])
sns.distplot(z['batsman_runs'])

"""Q3-- Write a function which will take a list as input and in return plot PDF and CDF curve as like in IRIS one.

     (you have to write your on logic for np.cumsum()--(cummulative sum- function) )
"""

# Write your code here--

def b(list):
  g=list
  result = 0
  a = []
  for x in list:
     result = result + x
     a.append(result)
  return a
b([3,5,8,9,6])





